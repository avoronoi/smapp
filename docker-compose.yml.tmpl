{{/* If DEPLOY is non-empty, run with Docker Swarm, otherwise Docker Compose */ -}}
{{ $deploy := ne (getenv "DEPLOY") "" -}}
{{/* Set LOCAL when debugging on local machine. */ -}}
{{ $local := ne (getenv "LOCAL") "" -}}
{{ $provider := ternary "swarm" "docker" $deploy -}}

x-user-labels: &user-labels
  traefik.enable: "true"
  traefik.http.services.user.loadbalancer.server.port: 8080

  traefik.http.routers.user.rule: Path(`/api/signup`) || Path(`/api/login`) || PathPrefix(`/api/users`)
  traefik.http.routers.user.priority: 1
  traefik.http.routers.user.middlewares: strip-api-prefix@file
  traefik.http.routers.user.service: user

  traefik.http.routers.user-auth.rule: Method(`POST`) && PathPrefix(`/api/users`)
  traefik.http.routers.user-auth.priority: 2
  traefik.http.routers.user-auth.middlewares: strip-api-prefix@file,jwt-auth@file
  traefik.http.routers.user-auth.service: user

x-post-labels: &post-labels
  traefik.enable: "true"
  traefik.http.services.post.loadbalancer.server.port: 8080

  traefik.http.routers.post.rule: PathPrefix(`/api/posts`) || PathPrefix(`/api/comments`) || Path(`/api/feed`)
  traefik.http.routers.post.priority: 1
  traefik.http.routers.post.middlewares: strip-api-prefix@file
  traefik.http.routers.post.service: post
  
  traefik.http.routers.post-auth.rule: >
    (Method(`POST`) && (PathPrefix(`/api/posts`) || PathPrefix(`/api/comments`))) ||
    (Method(`GET`) && Path(`/api/feed`))
  traefik.http.routers.post-auth.priority: 2
  traefik.http.routers.post-auth.middlewares: strip-api-prefix@file,jwt-auth@file
  traefik.http.routers.post-auth.service: post

x-image-labels: &image-labels
  traefik.enable: "true"
  traefik.http.services.image.loadbalancer.server.port: 8080

  traefik.http.routers.image-auth.rule: PathPrefix(`/api/upload-form`)
  traefik.http.routers.image-auth.middlewares: strip-api-prefix@file,jwt-auth@file
  traefik.http.routers.image-auth.service: image

x-platforms: &platforms
  {{- if $local }}
  {}
  {{- else }}
  platforms:
    - linux/amd64
    - linux/arm64
  {{- end }}

services:
  traefik:
    # Build from Dockerfile rather than using "traefik" image. This way a local plugin can be pulled.
    build:
      context: .
      dockerfile: traefik/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/traefik
    command:
      {{- if $local }}
      - --api.insecure=true
      {{- end }}
      - --providers.{{ $provider }}=true
      - --providers.{{ $provider }}.exposedByDefault=false
      - --providers.file.directory=/app/config/common
      - --entrypoints.web.address=:80
      - --experimental.localPlugins.jwt.moduleName=github.com/avoronoi/traefik-jwt-plugin
      - --ping.entryPoint=web
      - --log.level=DEBUG
      - --accesslog=true
    ports:
      - published: 80
        target: 80
        mode: host
      {{- if $local }}
      - 127.0.0.1:8080:8080
      {{- end }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/common_conf:/app/config/common
    {{- if $deploy }}
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.role == gateway
    configs:
      - source: jwt_public_key
        target: /app/config/jwt_public_key.pem
    {{- end }}

  user:
    build:
      context: .
      dockerfile: user/cmd/http/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/user
    depends_on:
      - user_db
    {{- if not $deploy }}
    env_file:
      - user/.env
    {{- end }}
    secrets:
      - mysql_password
      - jwt_private_key
    {{- if $deploy }}
    deploy:
      labels:
        <<: *user-labels
    {{- else }}
    labels:
      <<: *user-labels
    {{- end }}
  
  user_grpc:
    build:
      context: .
      dockerfile: user/cmd/grpc/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/user_grpc
    depends_on:
      - user_db
    {{- if not $deploy }}
    env_file:
      - user/.env
    {{- end }}
    secrets:
      - mysql_password

  user_db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=user_db
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_password
    secrets:
      - mysql_password

  user_db_migrations:
    container_name: user_db_migrations
    image: flyway/flyway
    volumes:
      - ./user/migrations:/flyway/sql
    depends_on:
      - user_db
    entrypoint: ["tail", "-f", "/dev/null"]
    secrets:
      - mysql_password

  post:
    build:
      context: .
      dockerfile: post/cmd/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/post
    depends_on:
      - post_db
    {{- if not $deploy }}
    env_file:
      - post/.env
    {{- end }}
    secrets:
      - mysql_password
    {{- if $deploy }}
    deploy:
      labels:
        <<: *post-labels
    {{- else }}
    labels:
      <<: *post-labels
    {{- end }}

  post_db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=post_db
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_password
    secrets:
      - mysql_password

  post_db_migrations:
    container_name: post_db_migrations
    image: flyway/flyway
    volumes:
      - ./post/migrations:/flyway/sql
    depends_on:
      - post_db
    entrypoint: ["tail", "-f", "/dev/null"]
    secrets:
      - mysql_password

  image:
    build:
      context: .
      dockerfile: image/cmd/http/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/image
    {{- if not $deploy }}
    env_file:
      - image/.env
    {{- end }}
    {{- if $deploy }}
    deploy:
      labels:
        <<: *image-labels
    {{- else }}
    labels:
      <<: *image-labels
    {{- end }}
    {{- /* When running locally, use IAM user. When running on EC2, IAM role should be attached. */}}
    {{- if $local }}
    volumes:
      - ~/.aws:/root/.aws
    {{- end }}
  
  image_grpc:
    build:
      context: .
      dockerfile: image/cmd/grpc/Dockerfile
      <<: *platforms
    image: ${REGISTRY}/image_grpc
    {{- if not $deploy }}
    env_file:
      - image/.env
    {{- end }}
    {{- /* When running locally, use IAM user. When running on EC2, IAM role should be attached. */}}
    {{- if $local }}
    volumes:
      - ~/.aws:/root/.aws
    {{- end }}

{{- if $deploy }}

configs:
  jwt_public_key:
    external: true

secrets:
  mysql_password:
    external: true
  jwt_private_key:
    external: true
{{- end }}
